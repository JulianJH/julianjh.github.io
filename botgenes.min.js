if (typeof bg !== "boolean") {
    var debug = true; // false for production
    var verbose = false; // false for production
    var offline = false; // false for production
    var cache = false; // true for production

    var bg = true;
    var tail = cache ? "" : "?_=" + new Date().getTime();
    var protocol = location.protocol;
    var base_url, api_faq, config_url, api_endpoint, key, botid, silence_mode;
    var my_coords = {
        lat: -34603700,
        lon: -58381600
    };
    var sessionTime = 45;
    var xCode = "";
    var bg_style = "";
    var bg_env = "prod";
    var ipAddress = "";
    var $;
    var load_preview_config = false;

    var BotToggleStatus = false;
    var BotAnimating = false;
    var enable_test_images = false;

    var speakingTime = 0;
    var delayed_response_timer;
    var loadFactor = 1.4;
    var response_shown = false;
    var audio_activate_timer;
    var html5_audio_enabled = isMobile() ? false : true;

    var enter_delay = 0;
    var buffer_timer;
    var pseudo_lf = " ";
    var lf_RegExp = new RegExp("[\n\r\t]+", "g");
    var getBotResponseTimer = 0;

    var load = (function() {
        function _load(tag) {
            return function(url, is_async) {
                if (is_async == "undefined") is_async = false;
                // This promise will be used by Promise.all to determine success or failure
                return new Promise(function(resolve, reject) {
                    var element = document.createElement(tag);
                    var parent = "body";
                    var attr = "src";

                    // Important success and error for the promise
                    element.onload = function() {
                        resolve(url);
                    };
                    element.onerror = function() {
                        reject(url);
                    };

                    // Need to set different attributes depending on tag type
                    switch (tag) {
                        case "script":
                            element.async = is_async;
                            element.charset = "UTF-8";
                            break;
                        case "link":
                            element.type = "text/css";
                            element.rel = "stylesheet";
                            attr = "href";
                            parent = "head";
                    }

                    // Inject into document to kick off loading
                    element.className = "bg-script";
                    element[attr] = url + tail;
                    document[parent].appendChild(element);
                });
            };
        }

        return {
            css: _load("link"),
            js: _load("script"),
            img: _load("img"),
        };
    })();

    bg_start_up();
}

function bg_start_up() {
    var start_up_msg = "starting botgenes.min.js";
    if (typeof bg_build != "undefined") start_up_msg += " " + bg_build;
    showMessageInConsole();
    loadVariables();

    if (typeof config_url == "undefined" || config_url == "") {
        config_url = base_url;
    }
    if (typeof jQuery === "undefined") {
        var script = document.createElement("script");
        script.onload = function() {
            //jQuery.noConflict();
            showMessageInConsole("loaded jQuery " + jQuery.fn.jquery);
            loadBlueBird();
        };
        if (offline)
            script.src = base_url + "/libraries/jquery-3.7.1.min.js?_=" + tail;
        else script.src = "https://code.jquery.com/jquery-3.7.1.min.js?_=" + tail;

        document.getElementsByTagName("head")[0].appendChild(script);
    } else {
        showMessageInConsole("using existing jQuery " + jQuery.fn.jquery);
        loadBlueBird();
    }
}

function loadBlueBird() {
    if ("undefined" !== typeof Promise) load_bot_config();
    else {
        try {
            showMessageInConsole("loading bluebird"),
                (script_url = offline ?
                    base_url + "/libraries/bluebird.min.js?_=" + tail :
                    "https://cdn.jsdelivr.net/bluebird/3.5.0/bluebird.min.js" + tail),
                $.getScript(script_url)
                .done(function(e, t) {
                    load_bot_config();
                })
                .fail(function(e, t, s) {
                    showMessageInConsole("failure loading BlueBird!");
                });
        } catch (e) {
            load_bot_config();
        }
	}
}

//show Console log if debug = true
function showMessageInConsole(message) {
    //if (verbose && console) console.trace();
    if (debug && console) console.log("BG: " + message);
}

function load_bot_config() {
    $ = jQuery.noConflict();
    styled_path = config_url + "/" + botid;
    config_path = styled_path + "/config_var.js" + tail;

    css_path = styled_path + "/" + botid + ".css";

    Promise.all([
            load_config_var_files(),
            load.css(css_path)
        ]).then(load_libraries)
        .catch(function(e) {
            showMessageInConsole(
                "failure loading configuration for " + botid + "! " + e
            );
        });
}

function load_config_var_files() {
    return load.js(config_path)
}

function load_libraries() {
    var ui = "bg-jquery-ui.min.js";

    if ($.fn.tabs || (typeof skipJQUI != "undefined" && skipJQUI)) {
        ui = "bg-ui.min.js";
    }

    libraries = [
        load.js(config_url + "/libraries/" + ui),
        load.js(config_url + "/libraries/bg_audio.js"),
        load.js(config_url + "/libraries/chat_connection.min.js"),
        load.js(config_url + "/libraries/bgemojis.js"),
    ];

    return Promise.all(libraries)
        .then(buildTemplate)
        .catch(function(e) {
            showMessageInConsole("failure loading scripts! " + e);
            return e;
        });
}

function buildTemplate() {
    return Promise.all([
            load.css(config_url + "/templates/" + templateBG + "/template.css"),
            load.js(config_url + "/templates/" + templateBG + "/build_template.min.js"),
        ])
        .then(function(promises_values) {
            if (typeof have_events == "boolean" && have_events) {
                load_event_handler_and_triggers();
            }
            if (typeof MTsite_id !== "undefined") {
                load_analytics();
            }

            showMessageInConsole("everything has been loaded template!");
            return promises_values;
        })
        .catch(function(e) {
            showMessageInConsole("failure loading scriptstemplate! " + e);
            return e;
        });
}

function fileExists(url) {
    return new Promise(function(resolve, reject) {
        const xhr = new XMLHttpRequest();
        xhr.open('HEAD', url, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    resolve(true);
                } else {
                    resolve(false);
                }
            }
        };
        xhr.send();
    });
}




function no_tags(input) {
    return input.replace(/<|>/g, "");
}

function httpGetAsync(theUrl, callback) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() {
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            callback(xmlHttp.responseText);
    };
    xmlHttp.open("GET", theUrl, true); // true for asynchronous
    xmlHttp.send(null);
}

function loadVariables() {
    var currentScript = document.getElementById("BotGenes");

    botid = no_tags(currentScript.getAttribute("bot_id").toUpperCase());

    script_src = currentScript.getAttribute("src");
    showMessageInConsole("script_src: " + script_src);

    base_url = protocol + "//" + location.hostname;

    var base_message = "script base: " + base_url;
    if (location.hostname == "localhost")
        base_message = "Warning! you are using localhost";
    showMessageInConsole(base_message);

    api_endpoint = base_url + "/secure/api/";

    var production_domains_re = /https*\:\/\/(efx\.|efx\-eu\.|)botgenes\.org/i;

    api_faq = base_url + "/kbase";
    base_url += "/widget";

    showMessageInConsole("base_url: " + base_url);

    config_url = base_url;

    fileUrl = base_url; // for compatibility


    valid_attributes = ["api_endpoint", "env", "config_url", "xCode", "bg_style", "api_faq"];

    //valid_attributes.forEach(read_attribute);

    function read_attribute(attribute) {
        if (
            typeof currentScript.getAttribute(attribute) != "undefined" &&
            currentScript.getAttribute(attribute) != null &&
            currentScript.getAttribute(attribute) != ""
        )
            config["attribute"] = no_tags(currentScript.getAttribute(attribute));
    }

    //botid =  no_tags(currentScript.getAttribute('bot_id').toUpperCase());

    if (
        typeof currentScript.getAttribute("api_endpoint") != "undefined" &&
        currentScript.getAttribute("api_endpoint") != null &&
        currentScript.getAttribute("api_endpoint") != ""
    )
        api_endpoint = no_tags(currentScript.getAttribute("api_endpoint"));
    showMessageInConsole("api_endpoint: " + api_endpoint);
    if (
        typeof currentScript.getAttribute("api_faq") != "undefined" &&
        currentScript.getAttribute("api_faq") != null &&
        currentScript.getAttribute("api_faq") != ""
    )
        api_faq = no_tags(currentScript.getAttribute("api_faq"));
    showMessageInConsole("api_faq: " + api_faq);
    if (
        typeof currentScript.getAttribute("env") != "undefined" &&
        currentScript.getAttribute("env") != null &&
        currentScript.getAttribute("env") != ""
    )
        bg_env = no_tags(currentScript.getAttribute("env"));
    if (bg_env == "preview") {
        bg_env = "test";
        enable_test_images = true;
        load_preview_config = true;
    }
    showMessageInConsole("environment: " + bg_env);

    if (
        typeof currentScript.getAttribute("config_url") != "undefined" &&
        currentScript.getAttribute("config_url") != null &&
        currentScript.getAttribute("config_url") != ""
    )
        config_url = no_tags(currentScript.getAttribute("config_url"));
    if (
        typeof currentScript.getAttribute("xCode") != "undefined" &&
        currentScript.getAttribute("xCode") != null &&
        currentScript.getAttribute("xCode") != ""
    )
        xCode = no_tags(currentScript.getAttribute("xCode"));
    if (
        typeof currentScript.getAttribute("bg_style") != "undefined" &&
        currentScript.getAttribute("bg_style") != null &&
        currentScript.getAttribute("bg_style") != ""
    )
        bg_style = no_tags(currentScript.getAttribute("bg_style"));
    //avatarID = currentScript.getAttribute('avatar');
    var config_message = "using std configuration";
    if (config_url != base_url)
        config_message = "warning! using customs config from " + config_url;
    showMessageInConsole(config_message);
    silence_mode = true;
}

function isMobile() {
    if (
        navigator.userAgent.match(/Android/i) ||
        navigator.userAgent.match(/webOS/i) ||
        navigator.userAgent.match(/iPhone/i) ||
        navigator.userAgent.match(/iPad/i) ||
        navigator.userAgent.match(/iPod/i) ||
        navigator.userAgent.match(/BlackBerry/i) ||
        navigator.userAgent.match(/Windows Phone/i)
    ) {
        return true;
    } else {
        return false;
    }
}
